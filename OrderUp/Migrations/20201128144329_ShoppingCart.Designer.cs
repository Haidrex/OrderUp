// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderUp.Models;

namespace OrderUp.Migrations
{
    [DbContext(typeof(restaurant_dbContext))]
    [Migration("20201128144329_ShoppingCart")]
    partial class ShoppingCart
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OrderUp.Models.Ingredientai", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<double?>("Kaina")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kaina")
                        .HasColumnType("double")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<double?>("Matas")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("matas")
                        .HasColumnType("double")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Nuotrauka")
                        .HasColumnType("text");

                    b.Property<string>("Pavadinimas")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pavadinimas")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(255);

                    b.Property<int?>("Tipas")
                        .HasColumnName("tipas")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("Tipas")
                        .HasName("tipas");

                    b.ToTable("ingredientai");
                });

            modelBuilder.Entity("OrderUp.Models.IngredientoTipas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("char(8)")
                        .IsFixedLength(true)
                        .HasMaxLength(8);

                    b.HasKey("Id");

                    b.ToTable("ingrediento_tipas");
                });

            modelBuilder.Entity("OrderUp.Models.Klientas", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adresas")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("adresas")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(255);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("klientas");
                });

            modelBuilder.Entity("OrderUp.Models.Padas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("char(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("padas");
                });

            modelBuilder.Entity("OrderUp.Models.Pica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Aprasymas")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("aprasymas")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(255);

                    b.Property<double?>("Kaina")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kaina")
                        .HasColumnType("double")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Nuotrauka")
                        .HasColumnType("text");

                    b.Property<int?>("Padas")
                        .HasColumnName("padas")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Pavadinimas")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pavadinimas")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'NULL'")
                        .HasMaxLength(255);

                    b.Property<int?>("Tipas")
                        .HasColumnName("tipas")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("Padas")
                        .HasName("padas");

                    b.HasIndex("Tipas")
                        .HasName("tipas");

                    b.ToTable("pica");
                });

            modelBuilder.Entity("OrderUp.Models.PicosIngredientai", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkIngredientaiid")
                        .HasColumnName("fk_Ingredientaiid")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkPicaid")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Kiekis")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kiekis")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("FkIngredientaiid")
                        .HasName("fk_Ingredientaiid");

                    b.HasIndex("FkPicaid");

                    b.ToTable("picos_ingredientai");
                });

            modelBuilder.Entity("OrderUp.Models.PicosTipas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("char(15)")
                        .IsFixedLength(true)
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("picos_tipas");
                });

            modelBuilder.Entity("OrderUp.Models.PristatymoBudas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("char(20)")
                        .IsFixedLength(true)
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("pristatymo_budas");
                });

            modelBuilder.Entity("OrderUp.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("FkKlientasid")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("FkPicaid")
                        .HasColumnName("fk_Picaid")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Kiekis")
                        .HasColumnName("kiekis")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("FkKlientasid");

                    b.HasIndex("FkPicaid")
                        .HasName("fk_Picaid");

                    b.ToTable("shopping_cart");
                });

            modelBuilder.Entity("OrderUp.Models.Uzsakymas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("FkKlientasid")
                        .HasColumnName("fk_Klientasid")
                        .HasColumnType("varchar(767)");

                    b.Property<double?>("Kaina")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kaina")
                        .HasColumnType("double")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("PrekiuKiekis")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("prekiu_kiekis")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("PristatymoBudas")
                        .HasColumnName("pristatymo_budas")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<DateTime?>("UzsakymoData")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("uzsakymo_data")
                        .HasColumnType("date")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("FkKlientasid")
                        .HasName("fk_Klientasid");

                    b.HasIndex("PristatymoBudas")
                        .HasName("pristatymo_budas");

                    b.ToTable("uzsakymas");
                });

            modelBuilder.Entity("OrderUp.Models.UzsakymoPreke", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkPicaid")
                        .HasColumnName("fk_Picaid")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkUzsakymasid")
                        .HasColumnName("fk_Uzsakymasid")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Kiekis")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kiekis")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("Id");

                    b.HasIndex("FkPicaid")
                        .HasName("fk_Picaid");

                    b.HasIndex("FkUzsakymasid")
                        .HasName("fk_Uzsakymasid");

                    b.ToTable("uzsakymo_preke");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OrderUp.Models.Klientas", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OrderUp.Models.Klientas", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderUp.Models.Klientas", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OrderUp.Models.Klientas", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderUp.Models.Ingredientai", b =>
                {
                    b.HasOne("OrderUp.Models.IngredientoTipas", "TipasNavigation")
                        .WithMany("Ingredientai")
                        .HasForeignKey("Tipas")
                        .HasConstraintName("ingredientai_ibfk_1");
                });

            modelBuilder.Entity("OrderUp.Models.Pica", b =>
                {
                    b.HasOne("OrderUp.Models.Padas", "PadasNavigation")
                        .WithMany("Pica")
                        .HasForeignKey("Padas")
                        .HasConstraintName("pica_ibfk_1");

                    b.HasOne("OrderUp.Models.PicosTipas", "TipasNavigation")
                        .WithMany("Pica")
                        .HasForeignKey("Tipas")
                        .HasConstraintName("pica_ibfk_2");
                });

            modelBuilder.Entity("OrderUp.Models.PicosIngredientai", b =>
                {
                    b.HasOne("OrderUp.Models.Ingredientai", "FkIngredientai")
                        .WithMany("PicosIngredientai")
                        .HasForeignKey("FkIngredientaiid")
                        .HasConstraintName("picos_ingredientai_ibfk_1")
                        .IsRequired();

                    b.HasOne("OrderUp.Models.Pica", "Fkpica")
                        .WithMany("PicosIngredientai")
                        .HasForeignKey("FkPicaid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderUp.Models.ShoppingCart", b =>
                {
                    b.HasOne("OrderUp.Models.Klientas", "FkKlientas")
                        .WithMany("ShoppingCart")
                        .HasForeignKey("FkKlientasid")
                        .HasConstraintName("shopping_cart_ibfk_3");

                    b.HasOne("OrderUp.Models.Pica", "FkPica")
                        .WithMany("ShoppingCart")
                        .HasForeignKey("FkPicaid")
                        .HasConstraintName("shopping_cart_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("OrderUp.Models.Uzsakymas", b =>
                {
                    b.HasOne("OrderUp.Models.Klientas", "FkKlientas")
                        .WithMany("Uzsakymas")
                        .HasForeignKey("FkKlientasid")
                        .HasConstraintName("uzsakymas_ibfk_2");

                    b.HasOne("OrderUp.Models.PristatymoBudas", "PristatymoBudasNavigation")
                        .WithMany("Uzsakymas")
                        .HasForeignKey("PristatymoBudas")
                        .HasConstraintName("uzsakymas_ibfk_1");
                });

            modelBuilder.Entity("OrderUp.Models.UzsakymoPreke", b =>
                {
                    b.HasOne("OrderUp.Models.Pica", "FkPica")
                        .WithMany("UzsakymoPreke")
                        .HasForeignKey("FkPicaid")
                        .HasConstraintName("uzsakymo_preke_ibfk_1")
                        .IsRequired();

                    b.HasOne("OrderUp.Models.Uzsakymas", "FkUzsakymas")
                        .WithMany("UzsakymoPreke")
                        .HasForeignKey("FkUzsakymasid")
                        .HasConstraintName("uzsakymo_preke_ibfk_3")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
